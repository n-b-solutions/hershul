import React, { createContext, useReducer, useEffect, useContext } from 'react';

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}

var DEFAULT_DOMAIN = 'https://www.googletagmanager.com';
var DEFAULT_SCRIPT_NAME = 'gtm.js';
/**
 * Function to get and set dataLayer
 * @param dataLayer - The dataLayer
 * @param dataLayerName - The dataLayer name
 */
var getDataLayerSnippet = function getDataLayerSnippet(dataLayer, dataLayerName) {
  if (dataLayerName === void 0) {
    dataLayerName = 'dataLayer';
  }
  return "window." + dataLayerName + " = window." + dataLayerName + " || [];" + (dataLayer ? "window." + dataLayerName + ".push(" + JSON.stringify(dataLayer) + ")" : '');
};
/**
 * Function to get the Iframe snippet
 * @param environment - The parameters to use a custom environment
 * @param customDomain - Custom domain for gtm
 * @param id - The id of the container
 */
var getIframeSnippet = function getIframeSnippet(id, environment, customDomain) {
  if (customDomain === void 0) {
    customDomain = DEFAULT_DOMAIN;
  }
  var params = "";
  if (environment) {
    var gtm_auth = environment.gtm_auth,
      gtm_preview = environment.gtm_preview;
    params = "&gtm_auth=" + gtm_auth + "&gtm_preview=" + gtm_preview + "&gtm_cookies_win=x";
  }
  return "<iframe src=\"" + customDomain + "/ns.html?id=" + id + params + "\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\" id=\"tag-manager\"></iframe>";
};
/**
 * Function to get the GTM script
 * @param dataLayerName - The name of the dataLayer
 * @param customDomain - Custom domain for gtm
 * @param customScriptName - Custom script file name for gtm
 * @param environment - The parameters to use a custom environment
 * @param id - The id of the container
 */
var getGTMScript = function getGTMScript(dataLayerName, id, environment, customDomain, customScriptName) {
  if (customDomain === void 0) {
    customDomain = DEFAULT_DOMAIN;
  }
  if (customScriptName === void 0) {
    customScriptName = DEFAULT_SCRIPT_NAME;
  }
  var params = "";
  if (environment) {
    var gtm_auth = environment.gtm_auth,
      gtm_preview = environment.gtm_preview;
    params = "+\"&gtm_auth=" + gtm_auth + "&gtm_preview=" + gtm_preview + "&gtm_cookies_win=x\"";
  }
  return "\n    (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':\n      new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\n      j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=\n      '" + customDomain + "/" + customScriptName + "?id='+i+dl" + params + ";f.parentNode.insertBefore(j,f);\n    })(window,document,'script','" + dataLayerName + "','" + id + "');\n  ";
};

/**
 * Function to setup the Google Tag Manager
 * @param params - The snippets params
 */
var setupGTM = function setupGTM(params) {
  var getDataLayerScript = function getDataLayerScript() {
    var dataLayerScript = document.createElement('script');
    if (params.nonce) {
      dataLayerScript.setAttribute('nonce', params.nonce);
    }
    dataLayerScript.innerHTML = getDataLayerSnippet(params.dataLayer, params.dataLayerName);
    return dataLayerScript;
  };
  var getNoScript = function getNoScript() {
    var noScript = document.createElement('noscript');
    noScript.innerHTML = getIframeSnippet(params.id, params.environment, params.customDomain);
    return noScript;
  };
  var getScript = function getScript() {
    var script = document.createElement('script');
    if (params.nonce) {
      script.setAttribute('nonce', params.nonce);
    }
    script.innerHTML = getGTMScript(params.dataLayerName, params.id, params.environment, params.customDomain, params.customScriptName);
    return script;
  };
  return {
    getDataLayerScript: getDataLayerScript,
    getNoScript: getNoScript,
    getScript: getScript
  };
};
/**
 * Function to init the GTM
 * @param dataLayer - The dataLayer
 * @param dataLayerName - The dataLayer name
 * @param environment - Specify the custom environment to use
 * @param nonce - Server-generated nonce
 * @param id - The ID of the GTM
 */
var initGTM = function initGTM(_ref) {
  var dataLayer = _ref.dataLayer,
    dataLayerName = _ref.dataLayerName,
    environment = _ref.environment,
    nonce = _ref.nonce,
    id = _ref.id,
    customDomain = _ref.customDomain,
    customScriptName = _ref.customScriptName;
  var gtm = setupGTM({
    dataLayer: dataLayer,
    dataLayerName: dataLayerName,
    environment: environment,
    nonce: nonce,
    id: id,
    customDomain: customDomain,
    customScriptName: customScriptName
  });
  var dataLayerScript = gtm.getDataLayerScript();
  var script = gtm.getScript();
  var noScript = gtm.getNoScript();
  document.head.insertBefore(dataLayerScript, document.head.childNodes[0]);
  document.head.insertBefore(script, document.head.childNodes[1]);
  document.body.insertBefore(noScript, document.body.childNodes[0]);
};
/**
 * Function to send the events to the GTM
 * @param dataLayerName - The dataLayer name
 * @param data - The data to push
 */
var sendToGTM = function sendToGTM(_ref2) {
  var dataLayerName = _ref2.dataLayerName,
    data = _ref2.data;
  if (window[dataLayerName]) {
    window[dataLayerName].push(data);
  } else {
    console.warn("dataLayer " + dataLayerName + " does not exist, has script be initialized");
  }
};

/**
 * The initial state
 */
var initialState = {
  dataLayer: undefined,
  dataLayerName: 'dataLayer',
  environment: undefined,
  nonce: undefined,
  id: '',
  injectScript: true
};
/**
 * The context
 */
var GTMContext = /*#__PURE__*/createContext(initialState);
var GTMContextDispatch = /*#__PURE__*/createContext(undefined);
function dataReducer(state, data) {
  sendToGTM({
    data: data,
    dataLayerName: state == null ? void 0 : state.dataLayerName
  });
  return state;
}
/**
 * The Google Tag Manager Provider
 */
function GTMProvider(_ref) {
  var state = _ref.state,
    children = _ref.children;
  var _useReducer = useReducer(dataReducer, _extends({}, initialState, state)),
    store = _useReducer[0],
    dispatch = _useReducer[1];
  useEffect(function () {
    if (!state || state.injectScript == false) return;
    var mergedState = _extends({}, store, state);
    initGTM(mergedState);
  }, [JSON.stringify(state)]);
  return React.createElement(GTMContext.Provider, {
    value: store
  }, React.createElement(GTMContextDispatch.Provider, {
    value: dispatch
  }, children));
}
function useGTMDispatch() {
  var context = useContext(GTMContextDispatch);
  if (context === undefined) {
    throw new Error('dispatchGTMEvent must be used within a GTMProvider');
  }
  return context;
}

export { GTMContext, GTMContextDispatch, GTMProvider, initialState, sendToGTM, useGTMDispatch };
//# sourceMappingURL=react-gtm-hook.esm.js.map
