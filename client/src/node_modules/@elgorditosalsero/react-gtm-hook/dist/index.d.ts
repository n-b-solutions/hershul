import React, { Context, ReactNode } from 'react';
import { ISendToGTM, ISnippetsParams } from './models/GoogleTagManager';
import { sendToGTM } from './utils/GoogleTagManager';
declare global {
    interface Window {
        dataLayer: Object | undefined;
        [key: string]: any;
    }
}
/**
 * The shape of the context provider
 */
declare type GTMHookProviderProps = {
    state?: ISnippetsParams;
    children: ReactNode;
};
/**
 * The shape of the hook
 */
export declare type IUseGTM = {
    UseGTMHookProvider: ({ children }: GTMHookProviderProps) => JSX.Element;
    GTMContext: Context<ISnippetsParams | undefined>;
};
/**
 * The initial state
 */
export declare const initialState: ISnippetsParams;
/**
 * The context
 */
export declare const GTMContext: React.Context<ISnippetsParams | undefined>;
export declare const GTMContextDispatch: React.Context<((data: ISendToGTM['data']) => void) | undefined>;
/**
 * The Google Tag Manager Provider
 */
declare function GTMProvider({ state, children }: GTMHookProviderProps): JSX.Element;
declare function useGTMDispatch(): (data: object) => void;
export { GTMProvider, useGTMDispatch, sendToGTM };
