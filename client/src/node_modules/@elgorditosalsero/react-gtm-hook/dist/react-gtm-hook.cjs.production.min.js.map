{"version":3,"file":"react-gtm-hook.cjs.production.min.js","sources":["../src/utils/snippets.ts","../src/utils/GoogleTagManager.ts","../src/index.tsx"],"sourcesContent":["import { ICustomEnvironmentParams, IDataLayer, ISnippets, ISnippetsParams } from '../models/GoogleTagManager'\n\nexport const DEFAULT_DOMAIN = 'https://www.googletagmanager.com'\nexport const DEFAULT_SCRIPT_NAME = 'gtm.js'\n\n/**\n * Function to get and set dataLayer\n * @param dataLayer - The dataLayer\n * @param dataLayerName - The dataLayer name\n */\nexport const getDataLayerSnippet = (\n  dataLayer: Pick<IDataLayer, 'dataLayer'>['dataLayer'],\n  dataLayerName: Pick<IDataLayer, 'dataLayerName'>['dataLayerName'] = 'dataLayer'\n): Pick<ISnippets, 'gtmDataLayer'>['gtmDataLayer'] =>\n  `window.${dataLayerName} = window.${dataLayerName} || [];` +\n  (dataLayer ? `window.${dataLayerName}.push(${JSON.stringify(dataLayer)})` : '')\n\n/**\n * Function to get the Iframe snippet\n * @param environment - The parameters to use a custom environment\n * @param customDomain - Custom domain for gtm\n * @param id - The id of the container\n */\nexport const getIframeSnippet = (\n  id: Pick<ISnippetsParams, 'id'>['id'],\n  environment?: ICustomEnvironmentParams,\n  customDomain: ISnippetsParams['customDomain'] = DEFAULT_DOMAIN\n) => {\n  let params = ``\n  if (environment) {\n    const { gtm_auth, gtm_preview } = environment\n    params = `&gtm_auth=${gtm_auth}&gtm_preview=${gtm_preview}&gtm_cookies_win=x`\n  }\n  return `<iframe src=\"${customDomain}/ns.html?id=${id}${params}\" height=\"0\" width=\"0\" style=\"display:none;visibility:hidden\" id=\"tag-manager\"></iframe>`\n}\n\n/**\n * Function to get the GTM script\n * @param dataLayerName - The name of the dataLayer\n * @param customDomain - Custom domain for gtm\n * @param customScriptName - Custom script file name for gtm\n * @param environment - The parameters to use a custom environment\n * @param id - The id of the container\n */\nexport const getGTMScript = (\n  dataLayerName: Pick<ISnippetsParams, 'dataLayerName'>['dataLayerName'],\n  id: Pick<ISnippetsParams, 'id'>['id'],\n  environment?: ICustomEnvironmentParams,\n  customDomain: ISnippetsParams['customDomain'] = DEFAULT_DOMAIN,\n  customScriptName: ISnippetsParams['customScriptName'] = DEFAULT_SCRIPT_NAME\n) => {\n  let params = ``\n  if (environment) {\n    const { gtm_auth, gtm_preview } = environment\n    params = `+\"&gtm_auth=${gtm_auth}&gtm_preview=${gtm_preview}&gtm_cookies_win=x\"`\n  }\n  return `\n    (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':\n      new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\n      j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=\n      '${customDomain}/${customScriptName}?id='+i+dl${params};f.parentNode.insertBefore(j,f);\n    })(window,document,'script','${dataLayerName}','${id}');\n  `\n}\n","import { getDataLayerSnippet, getGTMScript, getIframeSnippet } from './snippets'\nimport { ISendToGTM, ISetupGTM, ISnippetsParams } from '../models/GoogleTagManager'\n\n/**\n * Function to setup the Google Tag Manager\n * @param params - The snippets params\n */\nconst setupGTM = (params: ISnippetsParams): ISetupGTM => {\n  const getDataLayerScript = (): HTMLElement => {\n    const dataLayerScript = document.createElement('script')\n    if (params.nonce) {\n      dataLayerScript.setAttribute('nonce', params.nonce)\n    }\n    dataLayerScript.innerHTML = getDataLayerSnippet(params.dataLayer, params.dataLayerName)\n    return dataLayerScript\n  }\n\n  const getNoScript = (): HTMLElement => {\n    const noScript = document.createElement('noscript')\n    noScript.innerHTML = getIframeSnippet(params.id, params.environment, params.customDomain)\n    return noScript\n  }\n\n  const getScript = (): HTMLElement => {\n    const script = document.createElement('script')\n    if (params.nonce) {\n      script.setAttribute('nonce', params.nonce)\n    }\n    script.innerHTML = getGTMScript(\n      params.dataLayerName,\n      params.id,\n      params.environment,\n      params.customDomain,\n      params.customScriptName\n    )\n    return script\n  }\n\n  return {\n    getDataLayerScript,\n    getNoScript,\n    getScript\n  }\n}\n\n/**\n * Function to init the GTM\n * @param dataLayer - The dataLayer\n * @param dataLayerName - The dataLayer name\n * @param environment - Specify the custom environment to use\n * @param nonce - Server-generated nonce\n * @param id - The ID of the GTM\n */\nexport const initGTM = ({\n  dataLayer,\n  dataLayerName,\n  environment,\n  nonce,\n  id,\n  customDomain,\n  customScriptName\n}: ISnippetsParams): void => {\n  const gtm = setupGTM({\n    dataLayer,\n    dataLayerName,\n    environment,\n    nonce,\n    id,\n    customDomain,\n    customScriptName\n  })\n\n  const dataLayerScript = gtm.getDataLayerScript()\n  const script = gtm.getScript()\n  const noScript = gtm.getNoScript()\n\n  document.head.insertBefore(dataLayerScript, document.head.childNodes[0])\n  document.head.insertBefore(script, document.head.childNodes[1])\n  document.body.insertBefore(noScript, document.body.childNodes[0])\n}\n\n/**\n * Function to send the events to the GTM\n * @param dataLayerName - The dataLayer name\n * @param data - The data to push\n */\nexport const sendToGTM = ({ dataLayerName, data }: ISendToGTM): void => {\n  if (window[dataLayerName]) {\n    window[dataLayerName].push(data)\n  } else {\n    console.warn(`dataLayer ${dataLayerName} does not exist, has script be initialized`)\n  }\n}\n","import React, { Context, ReactNode, createContext, useEffect, useContext, useReducer } from 'react'\n\nimport { ISendToGTM, ISnippetsParams } from './models/GoogleTagManager'\nimport { initGTM, sendToGTM } from './utils/GoogleTagManager'\n\ndeclare global {\n  interface Window {\n    dataLayer: Object | undefined\n    [key: string]: any\n  }\n}\n\n/**\n * The shape of the context provider\n */\ntype GTMHookProviderProps = { state?: ISnippetsParams; children: ReactNode }\n\n/**\n * The shape of the hook\n */\nexport type IUseGTM = {\n  UseGTMHookProvider: ({ children }: GTMHookProviderProps) => JSX.Element\n  GTMContext: Context<ISnippetsParams | undefined>\n}\n\n/**\n * The initial state\n */\nexport const initialState: ISnippetsParams = {\n  dataLayer: undefined,\n  dataLayerName: 'dataLayer',\n  environment: undefined,\n  nonce: undefined,\n  id: '',\n  injectScript: true\n}\n\n/**\n * The context\n */\nexport const GTMContext = createContext<ISnippetsParams | undefined>(initialState)\nexport const GTMContextDispatch = createContext<((data: ISendToGTM['data']) => void) | undefined>(undefined)\n\nfunction dataReducer(state: ISnippetsParams, data: any) {\n  sendToGTM({ data, dataLayerName: state?.dataLayerName! })\n  return state\n}\n\n/**\n * The Google Tag Manager Provider\n */\nfunction GTMProvider({ state, children }: GTMHookProviderProps): JSX.Element {\n  const [store, dispatch] = useReducer(dataReducer, { ...initialState, ...state })\n\n  useEffect(() => {\n    if (!state || state.injectScript == false) return\n    const mergedState = { ...store, ...state }\n\n    initGTM(mergedState)\n  }, [JSON.stringify(state)])\n\n  return (\n    <GTMContext.Provider value={store}>\n      <GTMContextDispatch.Provider value={dispatch}>{children}</GTMContextDispatch.Provider>\n    </GTMContext.Provider>\n  )\n}\n\nfunction useGTMDispatch() {\n  const context = useContext(GTMContextDispatch)\n  if (context === undefined) {\n    throw new Error('dispatchGTMEvent must be used within a GTMProvider')\n  }\n\n  return context\n}\n\nexport { GTMProvider, useGTMDispatch, sendToGTM }\n"],"names":["sendToGTM","_ref2","dataLayerName","window","push","data","console","warn","initialState","dataLayer","undefined","environment","nonce","id","injectScript","GTMContext","createContext","GTMContextDispatch","dataReducer","state","_ref","children","_useReducer","useReducer","_extends","store","dispatch","useEffect","params","gtm","customDomain","customScriptName","getDataLayerScript","dataLayerScript","document","createElement","setAttribute","innerHTML","JSON","stringify","getNoScript","noScript","gtm_auth","gtm_preview","getIframeSnippet","getScript","script","getGTMScript","head","insertBefore","childNodes","body","initGTM","React","Provider","value","context","useContext","Error"],"mappings":"uXAEO,ICoFMA,EAAY,SAAHC,OAAMC,EAAaD,EAAbC,cACtBC,OAAOD,GACTC,OAAOD,GAAeE,KAFqBH,EAAJI,MAIvCC,QAAQC,kBAAkBL,iDC9DjBM,EAAgC,CAC3CC,eAAWC,EACXR,cAAe,YACfS,iBAAaD,EACbE,WAAOF,EACPG,GAAI,GACJC,cAAc,GAMHC,EAAaC,gBAA2CR,GACxDS,EAAqBD,qBAAgEN,GAElG,SAASQ,EAAYC,EAAwBd,GAE3C,OADAL,EAAU,CAAEK,KAAAA,EAAMH,oBAAeiB,SAAAA,EAAOjB,gBACjCiB,wEAMT,SAAoBC,OAAGD,EAAKC,EAALD,MAAOE,EAAQD,EAARC,SAC5BC,EAA0BC,aAAWL,EAAWM,KAAOhB,EAAiBW,IAAjEM,EAAKH,KAAEI,EAAQJ,KAStB,OAPAK,aAAU,WACHR,GAA+B,GAAtBA,EAAML,cDFD,SAAHM,OA9CFQ,EAuDVC,GAvDUD,EAuDK,CACnBnB,UATOW,EAATX,UAUEP,cATWkB,EAAblB,cAUES,YATSS,EAAXT,YAUEC,MATGQ,EAALR,MAUEC,GATAO,EAAFP,GAUEiB,aATUV,EAAZU,aAUEC,iBATcX,EAAhBW,kBAtBO,CACLC,mBA/ByB,WACzB,IDEFvB,EACAP,ECHQ+B,EAAkBC,SAASC,cAAc,UAK/C,OAJIP,EAAOhB,OACTqB,EAAgBG,aAAa,QAASR,EAAOhB,OAE/CqB,EAAgBI,qBDDlBnC,ECCoE0B,EAAO1B,iBDD3EA,EAAoE,aAEpE,UAAUA,eAA0BA,cAHpCO,ECEkDmB,EAAOnB,qBDElCP,WAAsBoC,KAAKC,UAAU9B,OAAgB,KCDnEwB,GA0BPO,YAvBkB,WAClB,IAAMC,EAAWP,SAASC,cAAc,YAExC,OADAM,EAASJ,UDImB,SAC9BxB,EACAF,EACAmB,YAAAA,IAAAA,EAxB4B,oCA0B5B,IAAIF,KAKJ,OAJIjB,IAEFiB,eADkCjB,EAA1B+B,yBAA0B/B,EAAhBgC,kDAGGb,iBAA2BjB,EAAKe,6FCdhCgB,CAAiBhB,EAAOf,GAAIe,EAAOjB,YAAaiB,EAAOE,cACrEW,GAqBPI,UAlBgB,WAChB,IAAMC,EAASZ,SAASC,cAAc,UAWtC,OAVIP,EAAOhB,OACTkC,EAAOV,aAAa,QAASR,EAAOhB,OAEtCkC,EAAOT,UDgBiB,SAC1BnC,EACAW,EACAF,EACAmB,EACAC,YADAD,IAAAA,EA9C4B,6CA+C5BC,IAAAA,EA9CiC,UAgDjC,IAAIH,KAKJ,OAJIjB,IAEFiB,iBADkCjB,EAA1B+B,yBAA0B/B,EAAhBgC,6QAObb,MAAgBC,eAA6BH,wEACnB1B,QAAmBW,YCjC/BkC,CACjBnB,EAAO1B,cACP0B,EAAOf,GACPe,EAAOjB,YACPiB,EAAOE,aACPF,EAAOG,kBAEFe,KAqCHb,EAAkBJ,EAAIG,qBACtBc,EAASjB,EAAIgB,YACbJ,EAAWZ,EAAIW,cAErBN,SAASc,KAAKC,aAAahB,EAAiBC,SAASc,KAAKE,WAAW,IACrEhB,SAASc,KAAKC,aAAaH,EAAQZ,SAASc,KAAKE,WAAW,IAC5DhB,SAASiB,KAAKF,aAAaR,EAAUP,SAASiB,KAAKD,WAAW,ICpB5DE,CAFiB5B,KAAQC,EAAUN,MAGlC,CAACmB,KAAKC,UAAUpB,KAGjBkC,gBAACtC,EAAWuC,UAASC,MAAO9B,GAC1B4B,gBAACpC,EAAmBqC,UAASC,MAAO7B,GAAWL,uEAKrD,WACE,IAAMmC,EAAUC,aAAWxC,GAC3B,QAAgBP,IAAZ8C,EACF,MAAM,IAAIE,MAAM,sDAGlB,OAAOF"}